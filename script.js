// –ú–∞—Å—Å–∏–≤—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
const slotImages = {
    slot1: ['images/slot1.jpeg', 'images/slot2.jpg', 'images/slot3.gif'],
    slot2: ['images/slot1.jpeg', 'images/slot2.jpg', 'images/slot3.gif'], 
    slot3: ['images/slot1.jpeg', 'images/slot2.jpg', 'images/slot3.gif']
};

// –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–∞—Å—Ç—å
const finalImages = ['images/slot2.jpg', 'images/slot2.jpg', 'images/slot2.jpg'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
function spinSlots() {
    const slots = document.querySelectorAll('.slot');
    const sound = document.getElementById('slotSound');
    const spinButton = document.querySelector('.spin-button');
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    spinButton.disabled = true;
    spinButton.style.opacity = '0.7';
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
    if (sound) {
        sound.currentTime = 0;
        sound.play().catch(e => console.log('Audio play failed:', e));
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
    slots.forEach((slot, index) => {
        animateSlot(slot, index);
    });
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        stopSlots(slots);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        spinButton.disabled = false;
        spinButton.style.opacity = '1';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            showWinMessage();
        }, 500);
        
    }, 3000);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
function animateSlot(slot, slotIndex) {
    const images = slotImages[`slot${slotIndex + 1}`];
    let currentIndex = 0;
    let spinCount = 0;
    const totalSpins = 20 + Math.random() * 10; // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    
    const spinInterval = setInterval(() => {
        // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const img = slot.querySelector('.slot-image');
        if (img) {
            img.src = images[currentIndex];
            img.alt = `–°–ª–æ—Ç ${currentIndex + 1}`;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        currentIndex = (currentIndex + 1) % images.length;
        spinCount++;
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        slot.spinInterval = spinInterval;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
        if (spinCount >= totalSpins) {
            clearInterval(spinInterval);
        }
    }, 100); // –°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
function stopSlots(slots) {
    slots.forEach((slot, index) => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (slot.spinInterval) {
            clearInterval(slot.spinInterval);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const finalImageIndex = Math.floor(Math.random() * finalImages.length);
        const img = slot.querySelector('.slot-image');
        if (img) {
            img.src = finalImages[finalImageIndex];
            img.alt = `–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç ${finalImageIndex + 1}`;
        }
    });
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
function showWinMessage() {
    const messages = [
        "üéâ –í–´ –í–´–ò–ì–†–ê–õ–ò! –ú–ï–°–Ø–ß–ù–´–ô –ó–ê–ü–ê–° –≠–ù–ï–†–ì–ï–¢–ò–ö–û–í –í–ê–®! üéâ",
        "üî• –£–î–ê–ß–ê –ù–ê –¢–í–û–ï–ô –°–¢–û–†–û–ù–ï! –ó–ê–ë–ò–†–ê–ô –ü–†–ò–ó! üî•",
        "üí∏ –î–ñ–ï–ö–ü–û–¢! –ú–ï–õ–õ–°–¢–†–û–ô –ì–û–†–î–ò–¢–°–Ø –¢–û–ë–û–ô! üí∏",
        "üöÄ –í–´ –°–æ—Ä–≤–∞–ª–∏ –ö—É—à! –≠–Ω–µ—Ä–≥–∏—è –±—å–µ—Ç –∫–ª—é—á–æ–º! üöÄ"
    ];
    
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const winPopup = document.createElement('div');
    winPopup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #000;
        padding: 30px;
        border-radius: 20px;
        border: 5px solid #000;
        font-size: 1.5em;
        font-weight: bold;
        text-align: center;
        z-index: 1000;
        box-shadow: 0 0 50px rgba(255,215,0,0.8);
        font-family: 'Press Start 2P', cursive;
        max-width: 80%;
    `;
    
    winPopup.innerHTML = `
        <div style="margin-bottom: 15px;">${randomMessage}</div>
        <div style="font-size: 0.8em; margin-top: 15px;">"–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –ª–∏–±–æ –ø–∞–Ω, –ª–∏–±–æ –ø—Ä–æ–ø–∞–ª!"</div>
        <button onclick="this.parentElement.remove()" style="
            margin-top: 20px;
            padding: 10px 20px;
            background: #000;
            color: #ffd700;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-family: 'Press Start 2P', cursive;
        ">–û—Ç–¥–∞—Ç—å –ú–µ–ª—Å—Ç—Ä–æ—é</button>
    `;
    
    document.body.appendChild(winPopup);
}

// –°–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã Mellstroy –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const mellstroyPhrases = [
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–º—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç!",
    "–ó–∞—Ä—è–∂–∞–π—Å—è –ø–æ-–≤–∑—Ä–æ—Å–ª–æ–º—É!",
    "–ó–¥–µ—Å—å —ç–Ω–µ—Ä–≥–∏—è –±—å–µ—Ç –∫–ª—é—á–æ–º!",
    "–ü—Ä–∏–Ω–∏–º–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ: —É—Ç—Ä–æ–º, –¥–Ω–µ–º –∏ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∏–º–æ–º!",
    "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫, —ç—Ç–æ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!"
];

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
function preloadImages() {
    const allImages = [...new Set([...slotImages.slot1, ...slotImages.slot2, ...slotImages.slot3, ...finalImages])];
    
    allImages.forEach(src => {
        const img = new Image();
        img.src = src;
    });
}

document.addEventListener('DOMContentLoaded', function() {
    const randomPhrase = mellstroyPhrases[Math.floor(Math.random() * mellstroyPhrases.length)];
    console.log(`üíä MELLSTROY: "${randomPhrase}"`);
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    preloadImages();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–ª—è —Ñ–æ–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.querySelector('.main-background')) {
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const background = document.querySelector('.main-background');
            if (background) {
                background.style.transform = `translateY(${scrolled * 0.5}px)`;
            }
        });
    }

});
function fixMobileScroll() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–±–ª-—Ç–∞–ø
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function (event) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            event.preventDefault();
        }
        lastTouchEnd = now;
    }, false);
    
    // –§–∏–∫—Å –¥–ª—è iOS
    document.addEventListener('touchmove', function (e) {
        e.preventDefault();
    }, { passive: false });
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const originalBodyOverflow = document.body.style.overflow;
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                const hasPopup = document.querySelector('div[style*="fixed"]');
                if (hasPopup) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = originalBodyOverflow;
                }
            }
        });
    });
    
    observer.observe(document.body, {
        attributes: true,
        attributeFilter: ['style']
    });
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    fixMobileScroll();
});
